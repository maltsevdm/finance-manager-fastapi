"""empty message

Revision ID: 1900a46e5db9
Revises: 
Create Date: 2024-03-06 17:17:01.506652

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa

# revision identifiers, used by Alembic.
revision: str = '1900a46e5db9'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('user',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('username', sa.String(), nullable=False),
                    sa.Column('registered_at', sa.DateTime(), nullable=False),
                    sa.Column('is_active', sa.Boolean(), nullable=False),
                    sa.Column('is_superuser', sa.Boolean(), nullable=False),
                    sa.Column('is_verified', sa.Boolean(), nullable=False),
                    sa.Column('email', sa.String(length=320), nullable=False),
                    sa.Column('hashed_password', sa.String(length=1024),
                              nullable=False),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_index(op.f('ix_user_email'), 'user', ['email'], unique=True)
    op.create_table('categories_id',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('user_id', sa.Integer(), nullable=False),
                    sa.ForeignKeyConstraint(['user_id'], ['user.id'],
                                            ondelete='CASCADE'),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_table('banks',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('user_id', sa.Integer(), nullable=False),
                    sa.Column('name', sa.String(), nullable=False),
                    sa.Column('group',
                              sa.Enum('cash', 'debit_card', 'credit_card',
                                      name='bankkindgroup'), nullable=False),
                    sa.Column('icon', sa.String(), nullable=True),
                    sa.Column('position', sa.Integer(), nullable=False),
                    sa.Column('amount', sa.Float(), nullable=False),
                    sa.Column('credit_card_balance', sa.Float(), nullable=True),
                    sa.Column('credit_card_limit', sa.Float(), nullable=True),
                    sa.CheckConstraint('credit_card_limit >= 0',
                                       name='check_credit_card_limit'),
                    sa.ForeignKeyConstraint(['id'], ['categories_id.id'],
                                            ondelete='CASCADE'),
                    sa.ForeignKeyConstraint(['user_id'], ['user.id'],
                                            ondelete='CASCADE'),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_index('banks_user_group_name_index', 'banks',
                    ['user_id', 'name', 'group'], unique=True)
    op.create_table('expense_income_categories',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('user_id', sa.Integer(), nullable=False),
                    sa.Column('name', sa.String(), nullable=False),
                    sa.Column('group', sa.Enum('income', 'expense',
                                               name='expenseincomegroup'),
                              nullable=False),
                    sa.Column('icon', sa.String(), nullable=True),
                    sa.Column('position', sa.Integer(), nullable=False),
                    sa.Column('monthly_limit', sa.Float(), nullable=True),
                    sa.CheckConstraint('monthly_limit >= 0',
                                       name='check_monthly_limit'),
                    sa.ForeignKeyConstraint(['id'], ['categories_id.id'],
                                            ondelete='CASCADE'),
                    sa.ForeignKeyConstraint(['user_id'], ['user.id'],
                                            ondelete='CASCADE'),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_index('ei_cat_user_group_name_index', 'expense_income_categories',
                    ['user_id', 'name', 'group'], unique=True)
    op.create_table('debts',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('user_id', sa.Integer(), nullable=False),
                    sa.Column('bank_id', sa.Integer(), nullable=False),
                    sa.Column('amount', sa.Float(), nullable=False),
                    sa.Column('deadline', sa.Date(), nullable=True),
                    sa.Column('notification', sa.Boolean(), nullable=False),
                    sa.Column('note', sa.String(), nullable=True),
                    sa.CheckConstraint('amount >= 0', name='check_amount'),
                    sa.ForeignKeyConstraint(['bank_id'], ['banks.id'],
                                            ondelete='CASCADE'),
                    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_table('transactions',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('user_id', sa.Integer(), nullable=False),
                    sa.Column('group', sa.Enum('income', 'expense', 'transfer',
                                               name='transactiongroup'),
                              nullable=False),
                    sa.Column('bank_id', sa.Integer(), nullable=False),
                    sa.Column('destination_id', sa.Integer(), nullable=False),
                    sa.Column('amount', sa.Float(), nullable=False),
                    sa.Column('date', sa.Date(), nullable=False),
                    sa.Column('status', sa.Enum('fact', 'predict',
                                                name='transactionstatus'),
                              nullable=False),
                    sa.Column('note', sa.String(), nullable=True),
                    sa.ForeignKeyConstraint(['bank_id'], ['banks.id'],
                                            ondelete='CASCADE'),
                    sa.ForeignKeyConstraint(['destination_id'],
                                            ['categories_id.id'],
                                            ondelete='CASCADE'),
                    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
                    sa.PrimaryKeyConstraint('id')
                    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('transactions')
    op.drop_table('debts')
    op.drop_index('ei_cat_user_group_name_index',
                  table_name='expense_income_categories')
    op.drop_table('expense_income_categories')
    op.drop_index('banks_user_group_name_index', table_name='banks')
    op.drop_table('banks')
    op.drop_table('categories_id')
    op.drop_index(op.f('ix_user_email'), table_name='user')
    op.drop_table('user')
    op.execute('DROP TYPE bankkindgroup')
    op.execute('DROP TYPE expenseincomegroup')
    op.execute('DROP TYPE transactiongroup')
    op.execute('DROP TYPE transactionstatus')
    # ### end Alembic commands ###
